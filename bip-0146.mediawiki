<pre>
  BIP: 146
  Title: Dealing with signature malleability
  Author: Pieter Wuille <pieter.wuille@gmail.com>
          Johnson Lau <jl2012@xbt.hk>
  Status: Draft
  Type: Standards Track
  Created: 2016-08-16
</pre>

==Abstract==

This document specifies proposed changes to the Bitcoin transaction validity rules to fix signature malleability for common transaction types.


==Motivation==

Signature malleability refers to the ability of any relay node on the network to transform the signature in transactions, with no access to the relevant private keys required. For non-segregated witness transactions, signature malleability will change the <code>txid</code> and invalidate any unconfirmed child transactions. Although the <code>txid</code> of segregated witness ([https://github.com/bitcoin/bips/blob/master/bip-0141.mediawiki BIP141]) transactions is not third party malleable, this malleability vector will change the <code>wtxid</code> and may reduce the efficiency of compact block relay ([https://github.com/bitcoin/bips/blob/master/bip-0152.mediawiki BIP152]).

Since the enforcement of Strict DER signatures ([https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki BIP66]), there are 2 remaining known sources of malleability in the signature passed to ECDSA verification opcodes:

# '''Inherent ECDSA signature malleability''': ECDSA signatures are inherently malleable as taking the negative of the number S inside (modulo the curve order) does not invalidate it.

# '''Inputs ignored by scripts''': The (unnecessary) extra stack element consumed by <code>OP_CHECKMULTISIG</code> and <code>OP_CHECKMULTISIGVERIFY</code> is not inspected in any manner, and could be replaced with any value.

This document specifies new rules to fix the aforesaid signature malleability.


==Specification==

To fix signature malleability, the following new rules are applied:


===LOW_S===

'''Definitions'''
*'''Integer''': all integers defined are non-zero and positive
*'''In-full-range''': an integer is in-full-range if it is within <code>0x1</code> and <code>0xFFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFE BAAEDCE6 AF48A03B BFD25E8C D0364140</code> (inclusive).
*'''In-low-range''': an integer is in-low-range if it is within <code>0x1</code> and <code>0x7FFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF 5D576E73 57A4501D DFE92F46 681B20A0</code> (inclusive).
*'''In-high-range''': an integer is in-high-range if it is in-full-range but not in-low-range.
*'''Out-of-range''': an integer is out-of-range if it is not in-full-range.

If both R and S values inside a ECDSA signature are in-full-range, we require that the S value MUST be in-low-range. This rule applies to every signature passed to <code>OP_CHECKSIG</code><ref>Including pay-to-witness-public-key-hash (P2WPKH) described in BIP141</ref>, <code>OP_CHECKSIGVERIFY</code>, <code>OP_CHECKMULTISIG</code>, or <code>OP_CHECKMULTISIGVERIFY</code>, when ECDSA verification is applied. If the signature does not pass the Low S value check, the entire script will fail and terminate immediately.

These operators all perform ECDSA verifications on pubkey/signature pairs, iterating from the top of the stack backwards. For each such verification, if the signature does not pass the LOW_S check, the entire script evaluates to false immediately. If the signature is valid DER and not failing LOW_S check, but does not pass ECDSA verification, opcode execution continues as it used to, causing opcode execution to stop and push false on the stack (but not immediately fail the script) in some cases, which potentially skips further signatures (and thus does not subject them to LOW_S check).

If R and/or S value is out-of-range, no new rule is applied. The ECDSA verification will return a false value but the script evaluation will continue.

In any case, as long as a signature is passed to ECDSA verification, it MUST follow strict DER encoding (see [https://github.com/bitcoin/bips/blob/master/bip-0066.mediawiki BIP66]).

A in-high-range S value in signature could be trivially replaced by <code>S' = 0xFFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFE BAAEDCE6 AF48A03B BFD25E8C D0364141 - S</code>.

'''Examples'''

Notation:

  CO       : curve order = 0xFFFFFFFF FFFFFFFF FFFFFFFF FFFFFFFE BAAEDCE6 AF48A03B BFD25E8C D0364141
  HCO      : half curve order = CO / 2 = 0x7FFFFFFF FFFFFFFF FFFFFFFF FFFFFFFF 5D576E73 57A4501D DFE92F46 681B20A0
  P1, P2   : valid, serialized, public keys
  R1, R2   : valid in-full-range R values in signatures using respective keys P1 and P2 (1 ≤ R1, R2 < CO)
  S1L, S2L : valid in-low-range S values in signatures using respective keys P1 and P2 (1 ≤ S1L, S2L ≤ HCO)
  S1H, S2H : in-high-range S (otherwise valid) values in signatures using respective keys P1 and P2 (HCO < S1H, S2H < CO)
  SFL      : any invalid in-low-range S values (1 ≤ SFL ≤ HCO)
  SFH      : any invalid in-high-range S values (HCO < SFH < CO)
  RO, SO   : any invalid out-of-range R and S values (CO ≤ RO, SO)
  SA       : any in-full-range or out-of-range S values (1 ≤ SA)
  A        : any random value (signature or not)

# <code>R1-S1L P1 CHECKSIG</code> returns True (unchanged)
# <code>R1-S1H P1 CHECKSIG</code> fails (changed from returning True)
# <code>R1-SFL P1 CHECKSIG</code> returns False (unchanged)
# <code>R1-SFH P1 CHECKSIG</code> fails (changed from returning False)
# <code>R1-SO  P1 CHECKSIG</code> returns False (unchanged)
# <code>RO-SA  P1 CHECKSIG</code> returns False (unchanged)

# <code>0 R1-S1L R2-S2L 2 P1 P2 2 CHECKMULTISIG</code> returns True (unchanged)
# <code>0 R1-S1H R2-S2L 2 P1 P2 2 CHECKMULTISIG</code> fails (changed from returning True)
# <code>0 R1-SFL R2-S2L 2 P1 P2 2 CHECKMULTISIG</code> returns False (unchanged)
# <code>0 R1-SFH R2-S2L 2 P1 P2 2 CHECKMULTISIG</code> fails (changed from returning False)
# <code>0 R1-SO  R2-S2L 2 P1 P2 2 CHECKMULTISIG</code> returns False (unchanged)
# <code>0 RO-SA  R2-S2L 2 P1 P2 2 CHECKMULTISIG</code> returns False (unchanged)

# <code>0 R1-S1L R2-S2H 2 P1 P2 2 CHECKMULTISIG</code> fails (changed from returning True)
# <code>0 R1-S1H R2-S2H 2 P1 P2 2 CHECKMULTISIG</code> fails (changed from returning True)
# <code>0 R1-SFL R2-S2H 2 P1 P2 2 CHECKMULTISIG</code> fails (changed from returning False)
# <code>0 R1-SFH R2-S2H 2 P1 P2 2 CHECKMULTISIG</code> fails (changed from returning False)
# <code>0 R1-SO  R2-S2H 2 P1 P2 2 CHECKMULTISIG</code> fails (changed from returning False)
# <code>0 RO-SA  R2-S2H 2 P1 P2 2 CHECKMULTISIG</code> fails (changed from returning False)

# <code>0 A R2-SFL 2 P1 P2 2 CHECKMULTISIG</code> returns False (unchanged)
# <code>0 A R2-SFH 2 P1 P2 2 CHECKMULTISIG</code> fails (changed from returning False)
# <code>0 A R2-SO  2 P1 P2 2 CHECKMULTISIG</code> returns False (unchanged)
# <code>0 A RO-SA  2 P1 P2 2 CHECKMULTISIG</code> returns False (unchanged)


===NULLDUMMY===

The extra stack element consumed by <code>OP_CHECKMULTISIG</code> and <code>OP_CHECKMULTISIGVERIFY</code> MUST be the empty byte array (the result of <code>OP_0</code>). Anything else makes the script evaluate to false immediately.


==Deployment==

This BIP will be deployed by "version bits" [https://github.com/bitcoin/bips/blob/master/bip-0009.mediawiki BIP9] using the same parameters for BIP141 and BIP143, with the name "segwit" and using bit 1.

For Bitcoin mainnet, the BIP9 starttime will be midnight TBD UTC (Epoch timestamp TBD) and BIP9 timeout will be midnight TBD UTC (Epoch timestamp TBD).

For Bitcoin testnet, the BIP9 starttime will be midnight 1 May 2016 UTC (Epoch timestamp 1462060800) and BIP9 timeout will be midnight 1 May 2017 UTC (Epoch timestamp 1493596800).


==Compatibility==

The reference client has produced compatible signatures since v0.9.0, and NULLDUMMY and LOW_S have been enforced as relay policy by the reference client since v0.10.0 and v0.11.1 respectively. As of August 2016, very few transactions violating the requirement are being added to the chain. In addition, every non-compliant signature can trivially be converted into a compliant one, so there is no loss of functionality by this requirement.


==Implementation==

An implementation for the reference client is available at https://github.com/bitcoin/bitcoin/pull/8533


==Footnotes==

<references />


==Acknowledgements==

This document is extracted from the previous [https://github.com/bitcoin/bips/blob/master/bip-0062.mediawiki BIP62] proposal which had input from various people.


==Copyright==

This document is placed in the public domain.
